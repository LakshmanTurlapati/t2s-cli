name: Build and Publish T2S CLI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install sentencepiece protobuf
      continue-on-error: true
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
      continue-on-error: true
    
    - name: Install package with basic dependencies first
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        pip install -e "."
      continue-on-error: false
    
    - name: Install additional dependencies
      run: |
        pip install pytest
      continue-on-error: true
    
    - name: Run basic import test
      run: |
        python -c "import t2s; print(f'T2S version: {t2s.__version__}')"
      continue-on-error: true
    
    - name: Run tests if pytest available
      run: |
        pytest tests/ -v --tb=short
      continue-on-error: true
    
    - name: Test CLI entry point
      run: |
        t2s --help
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
      continue-on-error: true
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    environment: test-pypi
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true
      continue-on-error: true

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e "."
      continue-on-error: true
    
    - name: Run safety check
      run: |
        safety check
      continue-on-error: true
    
    - name: Run bandit security scan
      run: bandit -r t2s/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
      continue-on-error: true

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
        pip install -e "."
      continue-on-error: true
    
    - name: Run black formatting check (informational)
      run: black --check t2s/ tests/
      continue-on-error: true
    
    - name: Run flake8 linting (informational)
      run: flake8 t2s/ tests/ --max-line-length=88 --extend-ignore=E203,W503,E501,F401
      continue-on-error: true
    
    - name: Run isort import sorting check (informational)
      run: isort --check-only t2s/ tests/
      continue-on-error: true 